{
	'result_dir': 'results',
	'exp_name': 'orig512',
	'minibatch_size': 16,
	'lr_rampup_kimg': 40,
	'G_lr_max': 0.001,
	'D_lr_max': 0.001,
	'total_kimg': 300000,
	'tick_kimg_default': 20,
	'image_snapshot_ticks': 3,
	'resume_network': '',
	'resume_dir': '',
	'resume_time': 0,
	'num_data_workers': 32,
	'random_seed': 1337,
	'progressive_growing': True,
	'comet_key': '55ZPExTofFcCTco3c0J4R6fDG',
	'comet_project_name': 'Orig',
	'iwass_lambda': 10.0,
	'iwass_epsilon': 0.001,
	'iwass_target': 1.0,
	'save_dataset': '',
	'load_dataset': '',
	'dataset_class': 'Jp2ImageFolderDataset',
	'postprocessors': ['ImageSaver'],
	'checkpoints_dir': '',
	'Trainer': {'D_training_repeats': 1, 'tick_nimg_default': 2000, 'resume_nimg': 0},
	'Generator': {'fmap_base': 4096, 'fmap_decay': 1.0, 'fmap_max': 512, 'latent_size': 512, 'normalize_latents': True, 'wscale': True, 'pixelnorm': True, 'leakyrelu': True},
	'Discriminator': {'fmap_base': 4096, 'fmap_decay': 1.0, 'fmap_max': 512, 'wscale': True, 'pixelnorm': False, 'leakyrelu': True},
	'DepthManager': {'minibatch_default': 16, 'minibatch_overrides': {6: 14, 7: 6, 8: 3}, 'tick_kimg_default': 20, 'tick_kimg_overrides': {3: 10, 4: 10, 5: 5, 6: 2, 7: 2, 8: 1}, 'lod_training_nimg': 100000, 'lod_transition_nimg': 100000, 'max_lod': None, 'depth_offset': None},
	'SaverPlugin': {'keep_old_checkpoints': False, 'network_snapshot_ticks': 10},
	'OutputGenerator': {'samples_count': 6, 'output_snapshot_ticks': 3},
	'Adam': {'betas': (0.0, 0.99), 'eps': 1e-08, 'weight_decay': 0},
	'DepthDataset': {'model_dataset_depth_offset': 2, 'model_initial_depth': 0, 'alpha': 1.0, 'range_in': (0, 255), 'range_out': (-1, 1), 'transform': None},
	'FolderDataset': {'max_dataset_depth': None, 'create_unused_depths': False, 'preload': False, 'model_dataset_depth_offset': 2, 'model_initial_depth': 0, 'alpha': 1.0, 'range_in': (-1, 1), 'range_out': (-1, 1), 'transform': None},
	'Jp2ImageFolderDataset': {'dir_path': '//data/jp2/', 'max_dataset_depth': None, 'create_unused_depths': False, 'preload': False, 'model_dataset_depth_offset': 2, 'model_initial_depth': 0, 'alpha': 1.0, 'range_in': (-1, 1), 'range_out': (-1, 1), 'imread_mode': 'L', 'scale_factor': 2, 'is1024': False, 'transform': None},
	'OldH5Dataset': {'h5_path': 'datasets/cifar10-32.h5', 'model_dataset_depth_offset': 2, 'max_images': None, 'model_initial_depth': 0, 'alpha': 1.0, 'range_in': (0, 255), 'range_out': (-1, 1), 'transform': None},
	'ImageSaver': {'samples_path': '.', 'drange': (-1, 1), 'resolution': 512, 'create_subdirs': True},
	'Postprocessor': {'samples_path': '.'},
	'SoundSaver': {'samples_path': '.', 'drange': (-1, 1), 'resolution': 512, 'mode': 'abslog', 'sample_rate': 16000, 'hop_length': 128, 'create_subdirs': True, 'verbose': False, 'griffin_lim_iter': 100},
}
Generator (
  (block0): GFirstBlock (
    (c1): PGConv2d (
      (conv): Conv2d(512, 512, kernel_size=(4, 4), stride=(1, 1), padding=(3, 3))
      (act): LeakyReLU (0.2)
    )
    (c2): PGConv2d (
      (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): LeakyReLU (0.2)
    )
    (toRGB): PGConv2d (
      (conv): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (blocks): ModuleList (
    (0): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): GBlock (
      (c1): PGConv2d (
        (conv): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (toRGB): PGConv2d (
        (conv): Conv2d(16, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)
Total nuber of parameters in Generator: 18353880
Discriminator (
  (blocks): ModuleList (
    (0): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 16, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (1): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 32, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (2): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (3): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (4): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (5): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (6): DBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c1): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
    (7): DLastBlock (
      (fromRGB): PGConv2d (
        (conv): Conv2d(1, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (stddev): MinibatchStddev (
      )
      (c1): PGConv2d (
        (conv): Conv2d(513, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU (0.2)
      )
      (c2): PGConv2d (
        (conv): Conv2d(512, 512, kernel_size=(4, 4), stride=(1, 1))
        (act): LeakyReLU (0.2)
      )
    )
  )
  (linear): Linear (512 -> 1)
)
Total nuber of parameters in Discriminator: 18361521
tick:     1	kimg:   20.000	depth: 0	alpha: 1.00	minibatch_size: 16	time: 0:10:46.530798	sec.tick: 646.5	sec.kimg: 32.3	G_loss: 0.7481	D_loss: -0.8898	D_real: -0.3729	D_fake: -0.7464
tick:     2	kimg:   40.000	depth: 0	alpha: 1.00	minibatch_size: 16	time: 0:20:59.639586	sec.tick: 613.1	sec.kimg: 30.7	G_loss: 0.1951	D_loss: -0.3572	D_real: -0.2862	D_fake: -0.1751
tick:     3	kimg:   60.000	depth: 0	alpha: 1.00	minibatch_size: 16	time: 0:31:17.179097	sec.tick: 617.5	sec.kimg: 30.9	G_loss: 0.2566	D_loss: -0.1317	D_real: 0.0032 	D_fake: -0.2340
tick:     4	kimg:   80.000	depth: 0	alpha: 1.00	minibatch_size: 16	time: 0:41:26.829264	sec.tick: 609.7	sec.kimg: 30.5	G_loss: 0.2255	D_loss: -0.1249	D_real: -0.0068	D_fake: -0.2040
tick:     5	kimg:  100.000	depth: 1	alpha: 0.00	minibatch_size: 16	time: 0:51:46.617767	sec.tick: 619.8	sec.kimg: 31.0	G_loss: 0.1967	D_loss: -0.1154	D_real: -0.0124	D_fake: -0.1783
tick:     6	kimg:  120.000	depth: 1	alpha: 0.20	minibatch_size: 16	time: 1:02:21.531896	sec.tick: 634.9	sec.kimg: 31.7	G_loss: 1.0166	D_loss: -0.4657	D_real: 0.1551 	D_fake: -0.7910
tick:     7	kimg:  140.000	depth: 1	alpha: 0.40	minibatch_size: 16	time: 1:12:35.504935	sec.tick: 614.0	sec.kimg: 30.7	G_loss: 0.4896	D_loss: -0.0864	D_real: 0.0907 	D_fake: -0.3117
tick:     8	kimg:  160.000	depth: 1	alpha: 0.60	minibatch_size: 16	time: 1:22:29.022635	sec.tick: 593.5	sec.kimg: 29.7	G_loss: 0.2902	D_loss: 0.0004 	D_real: 0.0145 	D_fake: -0.1341
tick:     9	kimg:  180.000	depth: 1	alpha: 0.80	minibatch_size: 16	time: 1:32:12.213067	sec.tick: 583.2	sec.kimg: 29.2	G_loss: 0.2262	D_loss: 0.0146 	D_real: -0.0166	D_fake: -0.0829
tick:    10	kimg:  200.000	depth: 1	alpha: 1.00	minibatch_size: 16	time: 1:41:57.020650	sec.tick: 584.8	sec.kimg: 29.2	G_loss: 0.1570	D_loss: 0.0088 	D_real: -0.0711	D_fake: -0.0231
tick:    11	kimg:  220.000	depth: 1	alpha: 1.00	minibatch_size: 16	time: 1:51:41.049804	sec.tick: 584.0	sec.kimg: 29.2	G_loss: 0.1686	D_loss: 0.0085 	D_real: -0.0405	D_fake: -0.0438
tick:    12	kimg:  240.000	depth: 1	alpha: 1.00	minibatch_size: 16	time: 2:01:25.332629	sec.tick: 584.3	sec.kimg: 29.2	G_loss: 0.1613	D_loss: 0.0008 	D_real: -0.0384	D_fake: -0.0497
tick:    13	kimg:  260.000	depth: 1	alpha: 1.00	minibatch_size: 16	time: 2:11:11.866811	sec.tick: 586.5	sec.kimg: 29.3	G_loss: 0.1822	D_loss: 0.0078 	D_real: -0.0028	D_fake: -0.0776
tick:    14	kimg:  280.000	depth: 1	alpha: 1.00	minibatch_size: 16	time: 2:20:04.238505	sec.tick: 532.4	sec.kimg: 26.6	G_loss: 0.1525	D_loss: 0.0108 	D_real: -0.0140	D_fake: -0.0586
tick:    15	kimg:  300.000	depth: 2	alpha: 0.00	minibatch_size: 16	time: 2:29:02.090285	sec.tick: 537.9	sec.kimg: 26.9	G_loss: 0.1295	D_loss: 0.0182 	D_real: -0.0131	D_fake: -0.0455
tick:    16	kimg:  320.000	depth: 2	alpha: 0.20	minibatch_size: 16	time: 2:38:08.559723	sec.tick: 546.5	sec.kimg: 27.3	G_loss: 1.0366	D_loss: -0.4153	D_real: 0.1236 	D_fake: -0.6593
tick:    17	kimg:  340.000	depth: 2	alpha: 0.40	minibatch_size: 16	time: 2:46:40.484526	sec.tick: 511.9	sec.kimg: 25.6	G_loss: 0.7215	D_loss: -0.2123	D_real: 0.0778 	D_fake: -0.3790
tick:    18	kimg:  360.000	depth: 2	alpha: 0.60	minibatch_size: 16	time: 2:55:21.807282	sec.tick: 521.3	sec.kimg: 26.1	G_loss: 0.3943	D_loss: -0.1496	D_real: -0.1236	D_fake: -0.1074
tick:    19	kimg:  380.000	depth: 2	alpha: 0.80	minibatch_size: 16	time: 3:04:00.785329	sec.tick: 519.0	sec.kimg: 25.9	G_loss: 0.4546	D_loss: -0.1430	D_real: -0.0306	D_fake: -0.1875
tick:    20	kimg:  400.000	depth: 2	alpha: 1.00	minibatch_size: 16	time: 3:12:38.537938	sec.tick: 517.8	sec.kimg: 25.9	G_loss: 0.4375	D_loss: -0.1136	D_real: 0.0051 	D_fake: -0.1947
tick:    21	kimg:  420.000	depth: 2	alpha: 1.00	minibatch_size: 16	time: 3:21:16.403674	sec.tick: 517.9	sec.kimg: 25.9	G_loss: 0.3906	D_loss: -0.1010	D_real: -0.0068	D_fake: -0.1624
tick:    22	kimg:  440.000	depth: 2	alpha: 1.00	minibatch_size: 16	time: 3:29:53.197918	sec.tick: 516.8	sec.kimg: 25.8	G_loss: 0.3415	D_loss: -0.1016	D_real: -0.0273	D_fake: -0.1399
tick:    23	kimg:  460.000	depth: 2	alpha: 1.00	minibatch_size: 16	time: 3:38:33.910869	sec.tick: 520.7	sec.kimg: 26.0	G_loss: 0.3373	D_loss: -0.0847	D_real: 0.0123 	D_fake: -0.1581
tick:    24	kimg:  480.000	depth: 2	alpha: 1.00	minibatch_size: 16	time: 3:47:11.127000	sec.tick: 517.2	sec.kimg: 25.9	G_loss: 0.2923	D_loss: -0.0747	D_real: -0.0072	D_fake: -0.1258
tick:    25	kimg:  500.000	depth: 3	alpha: 0.00	minibatch_size: 16	time: 3:55:54.087498	sec.tick: 523.0	sec.kimg: 26.1	G_loss: 0.2878	D_loss: -0.0770	D_real: 0.0069 	D_fake: -0.1399
tick:    26	kimg:  510.000	depth: 3	alpha: 0.10	minibatch_size: 16	time: 4:00:55.949151	sec.tick: 301.9	sec.kimg: 30.2	G_loss: 0.4736	D_loss: 0.4381 	D_real: -0.0967	D_fake: 0.2998 
tick:    27	kimg:  520.000	depth: 3	alpha: 0.20	minibatch_size: 16	time: 4:05:27.424397	sec.tick: 271.5	sec.kimg: 27.1	G_loss: 0.6400	D_loss: -0.0812	D_real: -0.0560	D_fake: -0.1078
tick:    28	kimg:  530.000	depth: 3	alpha: 0.30	minibatch_size: 16	time: 4:09:58.345150	sec.tick: 270.9	sec.kimg: 27.1	G_loss: 0.6359	D_loss: -0.1726	D_real: -0.0495	D_fake: -0.1822
tick:    29	kimg:  540.000	depth: 3	alpha: 0.40	minibatch_size: 16	time: 4:14:29.947756	sec.tick: 271.6	sec.kimg: 27.2	G_loss: 0.6298	D_loss: -0.1982	D_real: -0.0304	D_fake: -0.2289
tick:    30	kimg:  550.000	depth: 3	alpha: 0.50	minibatch_size: 16	time: 4:18:59.050946	sec.tick: 269.1	sec.kimg: 26.9	G_loss: 0.5335	D_loss: -0.2104	D_real: -0.0636	D_fake: -0.2048
tick:    31	kimg:  560.000	depth: 3	alpha: 0.60	minibatch_size: 16	time: 4:23:28.969441	sec.tick: 269.9	sec.kimg: 27.0	G_loss: 0.5068	D_loss: -0.2107	D_real: -0.0939	D_fake: -0.1772
tick:    32	kimg:  570.000	depth: 3	alpha: 0.70	minibatch_size: 16	time: 5:39:18.969725	sec.tick: 4550.0	sec.kimg: 455.0	G_loss: 0.4731	D_loss: -0.2271	D_real: -0.1127	D_fake: -0.1715
